 Sie kennen den Begriff von "Container" und können Begriffe wie Docker Image, Dockerfile, Docker-Container und Docker-Registry erklären.

 Sie können die Begriffe Virtualisierung und Cloud voneinander trennen.

 Sie können einen Docker-Container ausführen und interaktiv verwenden.

 Sie erkennen, warum Portweiterleitungen wichtig sind und können eine solche in Betrieb nehmen.

 Sie können mit Docker Volumes umgehen.

 Sie können Volumes benennen und in einem definierten Verzeichnis speichern.

 Sie verstehen den Standardaufbau eines Netzwerks mit Docker.

 Sie können eigene Netzwerkdefinitionen mit Docker umsetzen.

 Sie kennen die wichtigsten Befehle um Docker zu administrieren, dazu zählen Platzbedarf von Images und Containern ermitteln, Container und Images löschen, Volumes verwalten, Gesamtüberblick erhalten und Ungenutzten Speicher freigeben.

 Sie kennen die Syntax von Dockerfiles.

 Sie können das Beispiel von Dockerfiles nachvollziehen.

 Sie können eigene Dockerfiles erstellen, testen und dokumentieren.

 Sie kennen den Einsatzzweck von Docker Compose.

 Sie verstehen den Aufbau einer YAML-Datei und können eigene YAML-Dateien erstellen.

 Sie können Docker Compose anwenden.

 Sie verstehen wie in Docker Compose mit Passwörtern oder sonstigen geheimen Informationen umgegangen wird.

Dockerfile
Ein Dockerfile ist eine Textdatei mit Anweisungen, wie ein Docker Image gebaut wird. Sie enthält z. B. Basis-Image, Kopiervorgänge, Installationen und Startbefehle.

Beispiel: Einfaches Dockerfile
Dockerfile
Kopieren
Bearbeiten
# Basis-Image
FROM node:18

# Arbeitsverzeichnis erstellen
WORKDIR /app

# Dateien kopieren
COPY package*.json ./
RUN npm install

COPY . .

# Anwendung starten
CMD ["node", "index.js"]
Grundlegende Befehle in Dockerfiles:

Befehl	Bedeutung
FROM	Basis-Image definieren
WORKDIR	Arbeitsverzeichnis im Container setzen
COPY	Dateien vom Host in den Container kopieren
RUN	Befehl beim Bauen des Images ausführen
CMD	Startbefehl des Containers
Image bauen und Container starten
bash
Kopieren
Bearbeiten
docker build -t meine-node-app .
docker run -p 3000:3000 meine-node-app
Docker Compose
Mit Docker Compose kann man mehrere Container mit einer einzigen YAML-Datei definieren und gemeinsam starten. Es vereinfacht das Setup komplexer Umgebungen.

Beispiel: docker-compose.yml
yaml
Kopieren
Bearbeiten
version: "3.8"
services:
  web:
    image: nginx
    ports:
      - "8080:80"
  db:
    image: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: geheim
      POSTGRES_DB: mydb
    volumes:
      - db-data:/var/lib/postgresql/data

volumes:
  db-data:
Wichtige Konzepte in YAML-Dateien:
Einrückung ist entscheidend (2 Leerzeichen pro Ebene)

Aufbau basiert auf Key-Value-Strukturen

Unterstützt Listen (mit - eingeleitet)

Compose starten & stoppen:
bash
Kopieren
Bearbeiten
docker-compose up -d
docker-compose down
Geheimnisse in Compose
Sensible Informationen wie Passwörter sollten nicht direkt in docker-compose.yml geschrieben werden. Stattdessen:

Variante 1: .env Datei verwenden
.env Datei:

env
Kopieren
Bearbeiten
POSTGRES_USER=admin
POSTGRES_PASSWORD=supersecret
POSTGRES_DB=mydb
docker-compose.yml:

yaml
Kopieren
Bearbeiten
environment:
  - POSTGRES_USER=${POSTGRES_USER}
  - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  - POSTGRES_DB=${POSTGRES_DB}
Variante 2: Docker Secrets (nur mit Docker Swarm)
Bei größeren produktiven Umgebungen wird docker secret verwendet, um Passwörter sicher zu speichern – nicht Bestandteil einfacher Compose-Umgebungen.
